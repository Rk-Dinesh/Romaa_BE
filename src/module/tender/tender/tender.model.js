import mongoose from "mongoose";

const tenderSchema = new mongoose.Schema(
  {
    tender_id: String,
    tender_name: String,
    client_id: String,
    client_name: String,
    tender_type: String,
    tender_value: Number,
    tender_contact_person: String,
    tender_contact_phone: String,
    tender_contact_email: String,
    tender_description: String,
    tender_location: {
      city: String,
      state: String,
      country: String,
      pincode: String,
    },
    tender_start_date: Date,
    tender_end_date: Date,
    workOrder_id: String,
    workOrder_issued_date: Date,
    workOrder_issued_by: String,
    tender_status: String,
    boq_final_value: Number,
    zeroCost_final_value: Number,
    penalty_final_value: Number,
    emd: {
      emd_percentage: Number,
      emd_amount: (emd_percentage) => tender_value * (emd_percentage / 100),
      emd_validity: Date,
      approved_emd_details: [
        {
          emd_proposed_company: String,
          emd_proposed_amount: Number,
          emd_proposed_date: Date,
          emd_approved: Boolean,
          emd_approved_date: Date,
          emd_approved_by: String,
          emd_approved_amount: Number,
          emd_approved_status: String,
          emd_applied_bank: String,
          emd_applied_bank_branch: String,
          emd_level: String,
          emd_note: String,
          security_deposit_amount: Number,
          security_deposit_validity: Date,
          security_deposit_status: String,
          security_deposit_approved_by: String,
          security_deposit_approved_date: Date,
          security_deposit_amount_collected: Number,
          security_deposit_pendingAmount: (security_deposit_amount_collected) =>
            security_deposit_amount - security_deposit_amount_collected,
          security_deposit_note: String,
        },
      ],
    },
    security_deposit: {
      security_deposit_percentage: Number,
      security_deposit_amount: (security_deposit_percentage) =>
        tender_value * (security_deposit_percentage / 100),
      security_deposit_validity: Date,
    },
    tender_status_check: {
      site_investigation: Boolean,
      pre_bid_meeting: Boolean,
      bid_submission: Boolean,
      bid_evaluation: Boolean,
      techincal_bid_opening: Boolean,
      commercial_bid_opening: Boolean,
      negotiation: Boolean,
      work_order_issued: Boolean,
      work_agreement_signed: Boolean,
      project_commencement: Boolean,
      project_completion: Boolean,
      payment_received: Boolean,
    },
    project_documents_ids: [String],
    tender_plan_documents_ids: [String],
    contractor_details: [
      {
        contractor_id: String,
        contarct_site: String,
        contract_start_date: Date,
        contract_end_date: Date,
        contract_value: Number,
        contract_status: String,
        contract_documents_ids: [String],
        contract_description: String,
      },
    ],
    vendor_details: [String],
    follow_up_ids: [String],
    BoQ_id: String,
    created_by_user: String,
  },
  { timestamps: true }
);
const TenderModel = mongoose.model("Tenders", tenderSchema);
export default TenderModel;
